Your task is to analyze the current situation and to start or end business processes that we call flows, extract slots to advance active flows and respond to small talk and knowledge requests.

===
Here are the available flows, read them carefully. They represent the central business logic:
{% for flow in available_flows %}
- {{ flow.name }}: {{ flow.description }}
{%- endfor %}

===
Here is the current conversation:
{{ current_conversation }}

===
{% if current_flow != None %}
You are currently in the flow "{{ current_flow }}".
{% else %}
You are currently not in any flow.
{% endif %}

===
Based on this information generate a list of actions you want to take. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:
* Clarifying candidate flows, described by "Clarify(flow_name_1, flow_name_2, ...)". An example would be Clarify(list_contacts, add_contact, remove_contact). This is particularly useful for short messages.
* Starting a flow, described by "StartFlow(flow_name)". An example would be "StartFlow(transfer_money)"
* Responding to knowledge-oriented user messages, that need further information from a knowledge base, described by "SearchAndReply()". Also useful if the user questions the relevance or validity of a question.
* Responding to a casual, non-task-oriented user message, described by "ChitChat()".
* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by "HumanHandoff()".{% if current_flow != None %}
* Handling user messages with the intent to skip a question, described by "SkipQuestion()".
* Stopping the current flow on request of the user, described by "CancelFlow()".
{% endif %}

===
Write out the actions you want to take for the last user message, one per line.
Do not take unnecessary actions, for e.g. issuing a Clarify() command even when the user has clearly stated their goal.
Strictly adhere to the provided actions and their format listed above.
Use the previous conversation steps only to aid understanding.

Summarize the last user message in the context of the conversation. Then generate a final list of actions.
===
The user saying "{{ last_user_message }}" means that they might