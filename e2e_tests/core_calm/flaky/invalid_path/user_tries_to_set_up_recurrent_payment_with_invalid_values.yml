test_cases:
  - test_case: user wants to set up a new one off payment and starts a different flow
    steps:
      - user: I want to set up a new recurrent payment
      - commands:
        - start_flow: "setup_recurrent_payment"
      - utter: utter_ask_recurrent_payment_type
      - user: international transfer
      - commands:
        - set_slot:
          - recurrent_payment_type: international transfer
      - utter: utter_categorical_slot_rejection
      - utter: utter_ask_recurrent_payment_type
      - user: none of these, just need a one off payment
      - commands:
          - cancel_flow
          - start_flow: "transfer_money"
      - utter: utter_ask_transfer_money_recipient

  - test_case: user wants to set up an invalid payment type and the assistant re-asks in a loop until a valid value is given
    steps:
      - user: I want to set up a new recurrent payment
      - commands:
        - start_flow: "setup_recurrent_payment"
      - utter: utter_ask_recurrent_payment_type
      - user: international transfer
      - commands:
        - set_slot:
          - recurrent_payment_type: international transfer
      - utter: utter_categorical_slot_rejection
      - utter: utter_ask_recurrent_payment_type
      - user: international transfer
      - commands:
        - set_slot:
          - recurrent_payment_type: international transfer
      - utter: utter_categorical_slot_rejection
      - utter: utter_ask_recurrent_payment_type
      - user: international transfer
      - commands:
        - set_slot:
          - recurrent_payment_type: international transfer
      - utter: utter_categorical_slot_rejection
      - utter: utter_ask_recurrent_payment_type
      - user: direct debit
      - commands:
        - set_slot:
          - recurrent_payment_type: "direct debit"
      - utter: utter_ask_recipient
